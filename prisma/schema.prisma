// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/// The datasource block defines the connection to the database.
/// 
/// - `provider`: Specifies the database type. In this case, it is set to "cockroachdb".
/// - `url`: The environment variable `DATABASE_URL` is used to provide the database connection string.
/// - `relationMode`: Defines the relation mode for the database. Here, it is set to "prisma".
datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")

}


/// The `Stores` model represents a store entity in the database.
model Stores {
  id              String    @id @default(uuid())
  name            String
  userId          String
  billboards      Billboards[] @relation("StoreToBillboard")
  categories      Categories[] @relation("StoreToCategory")
  sizes           Sizes[] @relation("StoreToSize")
  colors           Colors[] @relation("StoreToColor")
  products        Products[]  @relation("StoreToProduct")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}


/// The `Billboards` model represents a billboard entity in the database.
model Billboards {
  id          String @id @default(uuid())
  storeId     String
  store       Stores @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Categories[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

/// The `Categories` model represents the categories entity in the database.
model Categories {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Stores       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      // Foreign Key to Billboard
  billboard   Billboards   @relation(fields: [billboardId], references: [id])
  name        String
  products    Products[]   @relation("CategoryToProduct")
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}

/// The `Products` model represents the Products entity in the database.
model Products {
  id          String    @id @default(uuid())
  storeId     String    // Foreign Key to Store
  store       Stores    @relation("StoreToProduct", fields: [storeId], references: [id])
  categoryId  String    // Foreign Key to Category
  category    Categories  @relation("CategoryToProduct", fields: [categoryId], references: [id])
  name        String
  price       Decimal
  isFeatured  Boolean   @default(false)
  isArchived  Boolean   @default(false)
  sizeId      String    // Foreign Key to Size
  size        Sizes      @relation(fields: [sizeId], references: [id])
  colorId     String    // Foreign Key to Color
  color       Colors     @relation(fields: [colorId], references: [id])
  images      Images[]   // Relation to Image model

  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([storeId])
  @@index([categoryId])
  @@index([sizeId])
  @@index([colorId])
}

// Intermediary for a many-to-many relationship
model Sizes {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Stores       @relation("StoreToSize", fields: [storeId], references: [id])
  name        String
  value       String
  products    Products[] // Relation to Products model
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  
}


model Colors {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Stores       @relation("StoreToColor", fields: [storeId], references: [id])
  name        String
  value       String
  products    Products[] // Relation to Products model
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  
}

model Images {
  id          String   @id @default(uuid())
  productId   String   // Foreign Key to Products
  product     Products  @relation(fields: [productId], references: [id], onDelete: Cascade)
  url         String   // URL of the image
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([productId])
}
