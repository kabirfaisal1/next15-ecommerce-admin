// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/// The datasource block defines the connection to the database.
/// 
/// - `provider`: Specifies the database type. In this case, it is set to "cockroachdb".
/// - `url`: The environment variable `DATABASE_URL` is used to provide the database connection string.
/// - `relationMode`: Defines the relation mode for the database. Here, it is set to "prisma".
datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")

}


/// The `Stores` model represents a store entity in the database.
/// 
/// Fields:
/// - `id`: A unique identifier for the store, generated as a UUID.
/// - `name`: The name of the store.
/// - `userId`: The identifier of the user who owns the store.
/// - `createdAt`: The timestamp when the store was created, with a default value of the current time.
/// - `updatedAt`: The timestamp when the store was last updated, automatically set to the current time on update.
model Stores {
  id              String    @id @default(uuid())
  name            String
  userId          String
  billboards      Billboards[] @relation("StoreToBillboard")
  categories      Categories[] @relation("StoreToCategory")
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}


/// The `Billboards` model represents a billboard entity in the database.
/// 
/// Fields:
/// - `id`: A unique identifier for the billboard, generated as a UUID.
/// - `storeId`: The identifier of the store associated with the billboard.
/// - `store`: A relation to the `Stores` model, representing the store associated with the billboard.
/// - `label`: The label or name of the billboard.
/// - `imageUrl`: The URL of the image displayed on the billboard.
/// - `createdAt`: The timestamp when the billboard was created, with a default value of the current time.
/// - `updatedAt`: The timestamp when the billboard was last updated, automatically set to the current time on update.
/// 
/// Indexes:
/// - `storeId`: An index on the `storeId` field to optimize queries filtering by store.
model Billboards {
  id          String @id @default(uuid())
  storeId     String
  store       Stores @relation("StoreToBillboard", fields: [storeId], references: [id])
  label       String
  imageUrl    String
  categories  Categories[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

/// The `Categories` model represents the categories in the e-commerce application.
/// Each category is associated with a store and a billboard.
/// 
/// Fields:
/// - `id`: The unique identifier for the category, generated as a UUID.
/// - `name`: The name of the category.
/// - `storeId`: The identifier of the store to which the category belongs.
/// - `store`: The store associated with the category, defined by the `StoreToCategory` relation.
/// - `billboardId`: The identifier of the billboard associated with the category.
/// - `billboard`: The billboard associated with the category.
/// - `createdAt`: The timestamp when the category was created, with a default value of the current time.
/// - `updatedAt`: The timestamp when the category was last updated, automatically set to the current time on update.
///
/// Indexes:
/// - `@@index([storeId])`: Index on the `storeId` field.
/// - `@@index([billboardId])`: Index on the `billboardId` field.
model Categories {
  id          String      @id @default(uuid())
  storeId     String      // Foreign Key to Store
  store       Stores       @relation("StoreToCategory", fields: [storeId], references: [id])
  billboardId String      // Foreign Key to Billboard
  billboard   Billboards   @relation(fields: [billboardId], references: [id])
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([storeId])
  @@index([billboardId])
}
