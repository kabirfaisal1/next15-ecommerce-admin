// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

/// The datasource block defines the connection to the database.
/// 
/// - `provider`: Specifies the database type. In this case, it is set to "cockroachdb".
/// - `url`: The environment variable `DATABASE_URL` is used to provide the database connection string.
/// - `relationMode`: Defines the relation mode for the database. Here, it is set to "prisma".
datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
  relationMode = "prisma"
}


/// The `Stores` model represents a store entity in the database.
/// 
/// Fields:
/// - `id`: A unique identifier for the store, generated as a UUID.
/// - `name`: The name of the store.
/// - `userId`: The identifier of the user who owns the store.
/// - `createdAt`: The timestamp when the store was created, with a default value of the current time.
/// - `updatedAt`: The timestamp when the store was last updated, automatically set to the current time on update.
model Stores {
  id         String       @id @default(uuid())
  name       String
  userId     String
  billboards Billboards[] @relation("StoreToBillboard") // Match relation name here
  categories Categories[]   @relation("StoreToCategory") // Match relation name here
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

/// The `Billboards` model represents a billboard entity in the database.
/// 
/// Fields:
/// - `id`: A unique identifier for the billboard, generated as a UUID.
/// - `storeId`: The identifier of the store associated with the billboard.
/// - `store`: A relation to the `Stores` model, representing the store associated with the billboard.
/// - `label`: The label or name of the billboard.
/// - `imageUrl`: The URL of the image displayed on the billboard.
/// - `createdAt`: The timestamp when the billboard was created, with a default value of the current time.
/// - `updatedAt`: The timestamp when the billboard was last updated, automatically set to the current time on update.
/// 
/// Indexes:
/// - `storeId`: An index on the `storeId` field to optimize queries filtering by store.
model Billboards {
  id          String @id @default(uuid())
  label       String
  storeId     String
  store       Stores   @relation("StoreToBillboard", fields: [storeId], references: [id]) // Ensure this matches the name
  imageUrl    String
  categories  Categories[]  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
}

model Categories {
  id          String @id @default(uuid())
  name        String
  storeId     String
  store       Stores   @relation("StoreToCategory", fields: [storeId], references: [id]) // Ensure this matches the name
  billboardId String
  billboard   Billboards @relation(fields: [billboardId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([storeId])
  @@index([billboardId])
}
