name: Build, Push, Stop, and Cleanup Docker Container

on:
  workflow_dispatch:  # Allows manual trigger

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    timeout-minutes: 120  # Automatically stop after 2 hours

    steps:
      # Restrict Execution to Repository Owner
      - name: Restrict Execution to Repository Owner
        run: |
          if [[ "${{ github.actor }}" != "${{ github.repository_owner }}" ]]; then
            echo "Only the repository owner can run this workflow."
            exit 1
          fi

      # Checkout repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Create .env file from GitHub Secrets
      - name: Create .env file from GitHub Secrets
        run: |
          echo "${{ secrets.APP_SECRET }}" > .env
          echo "Generated .env file:"
          cat .env  # Debugging output

      # Extract and Validate Environment Variables
      - name: Extract and Validate Environment Variables
        run: |
          set -a
          source .env
          set +a
          echo "DOCKER_USERNAME is set: ${DOCKER_USERNAME:+Yes}"
          echo "DOCKER_PASSWORD is set: ${DOCKER_PASSWORD:+Yes}"
          echo "DOCKER_IMAGE_NAME=${DOCKER_CONTAINER_NAME}"

          # Validate environment variables
          if [ -z "$DOCKER_USERNAME" ] || [ -z "$DOCKER_CONTAINER_NAME" ] || [ -z "$DOCKER_PASSWORD" ]; then
            echo "ERROR: Missing required environment variables."
            exit 1
          fi

      - name: Debug Environment Variables
        run: |
          echo "DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}"
          echo "DOCKER_PASSWORD length: ${#DOCKER_PASSWORD}"


      # Log in to Docker Hub
      - name: Log in to Docker Hub
        run: |
          echo "${{ secrets.DOCKER_PASSWORD }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build Docker Image (Include .env in Image)
      - name: Build Docker Image (Include .env in Image)
        run: |
          set -a
          source .env
          set +a
          echo "Building Docker image: $DOCKER_CONTAINER_NAME:latest"

          docker build -f docker/Dockerfile.stage \
            --build-arg DOCKER_CONTAINER_NAME="$DOCKER_CONTAINER_NAME" \
            --build-arg DOCKER_USERNAME="$DOCKER_USERNAME" \
            --build-arg DOCKER_PASSWORD="$DOCKER_PASSWORD" \
            -t "$DOCKER_CONTAINER_NAME:latest" .

      # Run Container for Debugging (Check Logs)
      - name: Run Container for Debugging (Check Logs)
        run: |
          echo "Running container to check if it exits immediately..."
          CONTAINER_NAME="next15_container"
          IMAGE_NAME="$DOCKER_CONTAINER_NAME:latest"

          # Start container
          CONTAINER_ID=$(docker run -d --name $CONTAINER_NAME -p 8000:8000 $IMAGE_NAME)

          # Save container ID to a file
          echo "$CONTAINER_ID" > container_id.txt

          # Wait for container to stabilize
          sleep 5
          echo "Container Logs:"
          docker logs $CONTAINER_ID || echo "No logs available."

          # Check if container is still running
          STATUS=$(docker inspect -f '{{.State.Status}}' $CONTAINER_ID)
          if [ "$STATUS" != "running" ]; then
            echo "ERROR: Container exited unexpectedly."
            docker logs $CONTAINER_ID
            exit 1
          fi

      # Upload Container ID for Stop Workflow
      - name: Upload Container ID for Stop Workflow
        uses: actions/upload-artifact@v4
        with:
          name: container-id
          path: container_id.txt

      # Push Docker Image to Docker Hub
      - name: Push Docker Image
        run: |
          echo "Pushing image to Docker Hub..."
          docker push "$DOCKER_CONTAINER_NAME:latest"

      # Print Deployment Instructions
      - name: Print Deployment Instructions
        run: |
          echo "================ Deployment Instructions ================"
          echo "To run this Docker container on another system, follow these steps:"
          echo ""
          echo "1. Ensure Docker is installed on your system."
          echo "2. Log in to Docker Hub (if required):"
          echo "   docker login -u $DOCKER_USERNAME"
          echo "3. Pull the latest Docker image:"
          echo "   docker pull $DOCKER_CONTAINER_NAME:latest"
          echo "4. Run the container:"
          echo "   docker run -d --name next15_container -p 8000:8000 $DOCKER_CONTAINER_NAME:latest"
          echo ""
          echo "Note: Modify the port mapping (-p 8000:8000) if needed."
          echo "========================================================="

  stop-and-cleanup:
    needs: build-and-push  # Ensures this runs after build-and-push job
    runs-on: ubuntu-latest
    timeout-minutes: 5  # Safety limit for cleanup

    steps:
      # Download Container ID from previous job
      - name: Download Container ID
        uses: actions/download-artifact@v4
        with:
          name: container-id

      # Read Container ID from file
      - name: Read Container ID
        run: |
          CONTAINER_ID=$(cat container_id.txt)
          echo "Stopping container: $CONTAINER_ID"

      # Stop and Remove Container
      - name: Stop and Remove Container
        run: |
          CONTAINER_ID=$(cat container_id.txt)

          if [ -n "$CONTAINER_ID" ]; then
            echo "Stopping container..."
            docker stop "$CONTAINER_ID" || echo "Container already stopped."

            echo "Removing container..."
            docker rm "$CONTAINER_ID" || echo "Container already removed."
          else
            echo "No container ID found!"
          fi

      # Remove Docker Image
      - name: Remove Docker Image
        run: |
          set -a
          source .env
          set +a
          echo "Removing Docker image: $DOCKER_CONTAINER_NAME:latest"
          docker rmi "$DOCKER_CONTAINER_NAME:latest" || echo "Image already removed."

      # Cleanup Container ID File
      - name: Cleanup Container ID File
        run: rm -f container_id.txt
